pipeline {
  agent any
  options {
    timeout(time: 1, unit: 'HOURS')
    parallelsAlwaysFailFast()
  }
  stages {
    stage('Clean') { steps { sh 'git clean -ffdx && make clean' } }
    stage('Test') {
      steps {
        sh 'make testcover'
        cobertura coberturaReportFile: 'coverage.xml', failUnhealthy: false, failUnstable: false, maxNumberOfBuilds: 0, onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false
      }
    }
    stage('Lint') {
      steps {
        sh '(pylint --rcfile=.pylintrc msresist > pylint.log || echo "pylint exited with $?")'
        recordIssues qualityGates: [[threshold: 5, type: 'TOTAL_HIGH', unstable: true], [threshold: 60, type: 'TOTAL_NORMAL', unstable: true], [threshold: 60, type: 'TOTAL_LOW', unstable: true]], tools: [pyLint(pattern: 'pylint.log')]
      }
    }
    stage('Build Notebooks') {
      steps {
        sh 'make all'
        archiveArtifacts artifacts: 'figure*.svg, *.pdf', onlyIfSuccessful: true
      }
    }
  }
  post {
    always {
      junit allowEmptyResults: true, testResults: 'junit.xml'
    }
  }
}
