pipeline {
  agent { label 'docker' }
  options {
    timeout(time: 24, unit: 'HOURS')
    parallelsAlwaysFailFast()
  }
  stages {
    stage('Clean/Setup') {
      steps {
        sh 'git submodule update --init --recursive && make clean'
        sh 'make venv'
      }
    }
    stage('Test') {
      steps {
        sh 'make testcover'
        cobertura coberturaReportFile: 'coverage.xml', failUnhealthy: false, failUnstable: false, maxNumberOfBuilds: 0, onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false
      }
    }
    stage('Lint') {
      steps {
        sh 'make pylint.log'
        recordIssues qualityGates: [[threshold: 1, type: 'TOTAL_HIGH', unstable: true], [threshold: 20, type: 'TOTAL_NORMAL', unstable: true], [threshold: 60, type: 'TOTAL_LOW', unstable: true]], tools: [pyLint(pattern: 'pylint.log')]
      }
    }
    stage('Build') {
      steps {
        lock ('manubot') {
          sh 'make output/biol/manuscript.md'
          sh 'make output/method/manuscript.md'
        }
        sh 'make -j 2 all'
        archiveArtifacts artifacts: 'figure*.svg, *.pdf', onlyIfSuccessful: true
        publishHTML([allowMissing:false, alwaysLinkToLastBuild:false, keepAll:true, reportDir:'output/biol', reportFiles:'manuscript.html', reportName:'Biology Paper'])
        publishHTML([allowMissing:false, alwaysLinkToLastBuild:false, keepAll:true, reportDir:'output/method', reportFiles:'manuscript.html', reportName:'Methods Paper'])
      }
    }
  }
  post {
    always {
      junit allowEmptyResults: true, testResults: 'junit.xml'
    }
  }
}
